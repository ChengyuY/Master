{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE OverloadedStrings #-} -- Pour les textes

module Cours5 where

import qualified Data.Text as Text
import Data.Text (Text)
import qualified Data.Text.Read as Read

import Data.Foldable (Foldable)
import qualified Data.Foldable as F

data MoyenPaiement =
  Cheque Int  -- numéro du chèque
  | Carte String String -- nom du porteur, numéro de CB
  | Espece

description :: MoyenPaiement -> String
description mp = "Paiement par " <>
  case mp of
    Cheque n -> "Cheque No" <> (show n)
    Carte nom num -> "Carte No" <> num <> ", nom : " <> nom
    Espece -> "Espèce"

description2 :: MoyenPaiement -> String
description2 mp = "Paiement par " <> (describe mp)
  where describe (Cheque n) = "Cheque No" <> (show n)
        describe (Carte nom num) = "Carte No" <> num <> ", nom : " <> nom
        describe Espece = "Espèce"

type Name = String

data PersonInfo = PersonInfo {
  firstName, middleName, lastName :: Name
  , age :: Age
  , login :: String
  , birthYear :: Int }
  deriving Show

anniversaryBest :: PersonInfo -> PersonInfo
anniversaryBest pers@(PersonInfo { age = a}) = pers { age = a + 1}

data MyMaybe a =
  MyNothing
  | MyJust a
  deriving (Show, Eq)
--   MyNothing  est un *constructeur de données* (*data constructor*) à zéro argument
--   MyJust  est un *constructeur de données* (*data constructor*) à un argument
-- >>> MyNothing
-- MyNothing
-- >>> :t MyNothing
-- MyNothing :: MyMaybe a
-- >>> :t MyJust True
-- MyJust True :: MyMaybe Bool

-- >>> 1 : 2 : 3 : []
-- [1,2,3]
-- >>> :t [1, 2, 3, 4]
-- [1, 2, 3, 4] :: Num a => [a]

myMap :: (a -> b) -> List a -> List b
myMap f Nil = Nil
myMap f (Cons x xs) = Cons (f x) (myMap f xs)

comp :: (b -> c) -> (a -> b) -> a -> c
comp g f = \x -> g (f x)
-- >>> (comp (\x -> x + 1) length) ["a", "b", "c", "d"]
-- 5

prop_mapcomp :: Eq c => (b -> c) -> (a -> b) -> List a -> Bool
prop_mapcomp g f xs =
  myMap (comp g f) xs == myMap g (myMap f xs)

mySeq :: Seq Text
mySeq = Seq.fromList ["a", "b", "c", "d", "e"]

seqFirst :: Seq a -> Maybe a
seqFirst (x :<| _) = Just x
seqFirst _ = Nothing
seqLast :: Seq a -> Maybe a
seqLast (_ :|> x) = Just x
seqLast _ = Nothing
-- >>> Seq.index mySeq 0
-- "a"
-- >>> Seq.index mySeq 2
-- "c"

carres :: Seq Integer -> Seq Integer
carres xs = fmap (\x -> x * x) xs
-- foldrWithIndex :: (Int -> a -> b -> b) -> b -> Seq a -> b 

somme :: Seq Integer -> Integer
somme xs = Seq.foldrWithIndex (\ idx elem res -> res + elem) 0 xs
-- >>> somme (Seq.fromList [1, 2, 3, 4, 5])
-- 15

produit :: Seq Integer -> Integer
produit xs = Seq.foldrWithIndex (\ idx elem res -> res * elem) 1 xs
-- >>> produit (Seq.fromList [1, 2, 3, 4, 5])
-- 120

myMap :: Map Text Integer
myMap = Map.fromList [("a", 1), ("b", 2), ("c", 3), ("d", 4)]
-- >>> Map.lookup (Text.pack "c") myMap
-- Just 3
-- >>> Map.lookup (Text.pack "e") myMap
-- Nothing

listKeys :: Map k a -> Seq k
listKeys m = Map.foldrWithKey (\cle val res -> res :|> cle) Empty m
-- >>> listKeys myMap
-- fromList ["d","c","b","a"]

addLast :: a -> Seq a -> Seq a
addLast x Empty = Empty :|> x    -- petit oublie : Empty est la s�quence vide
addLast x xs = xs :|> x
-- addLast == :|>           <=== donc vous voyez, je dis pas toujours des trucs intelligents
-- >>> addLast (Text.pack "toto") mySeq
-- fromList ["a","b","c","d","e","toto"]

myMap :: (a -> b) -> Seq a -> Seq b
myMap f xs = aux xs Empty
  where aux Empty res = res
        aux (x :<| xs) res = aux xs (res :|> (f x))
-- >>> myMap (\x -> x * x) intSeq
-- fromList [1,4,9,16,25]

-- >>> Seq.index txtSeq 0
-- "a"
-- >>> Seq.index txtSeq 3
-- "d"
-- >>> txtSeq !? 0
-- Just "a"
-- >>> txtSeq !? 3
-- Just "d"
-- >>> txtSeq !? 6
-- Nothing

keyOfMax :: Ord a => Map k a -> Maybe (k,a)
keyOfMax = Map.foldrWithKey search Nothing
  where search :: Ord a => k -> a -> Maybe (k,a) -> Maybe (k,a)
        search key val Nothing = Just (key, val)
        search key val (Just (maxKey, maxVal))
          | val > maxVal = Just (key, val)
          | otherwise = Just (maxKey, maxVal)


somme :: Seq Integer -> Integer
somme xs = foldr (\elem res -> elem + res) 0 xs

maxAndIndex :: Seq Integer -> Maybe (Integer, Int)
maxAndIndex Empty = Nothing
maxAndIndex (x :<| xs) = Just $ Seq.foldrWithIndex step (x, 0) xs
  where step :: Int -> Integer -> (Integer, Int) -> (Integer, Int)
        step index elemCourant (max, indexMax)
          | elemCourant > max = (elemCourant, index)
          | otherwise = (max, indexMax)

-- >>> foldr (+) 0 myMapa
-- 10
-- >>> foldr (*) 1 myMap
-- 24
-- >>> foldr (:) [] myMap   
-- [1,2,3,4]

mySet :: Set Integer
mySet = Set.fromList [1, 2, 1, 3, 3, 5, 4, 5, 1]
-- >>> mySet
-- fromList [1,2,3,4,5]

-- >>> :t Set.insert
-- Set.insert :: Ord a => a -> Set a -> Set a
-- >>> Set.insert 12 mySet
-- fromList [1,2,3,4,5,12]

-- >>> Set.member 2 mySet
-- True
-- >>> Set.member 12 mySet
-- False

-- >>> Set.isSubsetOf mySet (Set.fromList [2, 3, 4])
-- False
-- >>> mySet `Set.union`  (Set.fromList [12, 3, 9])
-- fromList [1,2,3,4,5,9,12]
-- >>> Set.foldr (<>) "" mySet
-- "abcde"
-- >>> Set.fold (+) 0 (Set.fromList [1, 2, 3, 4, 5])
-- 15
-- >>> Set.fold (*) 1 (Set.fromList [1, 2, 3, 4, 5])
-- 120


myCompo :: [Integer] -> Integer
myCompo =  foldl' (+) 0 . fmap (\x -> x * x) . filter odd
-- on va beaucoup mieux ici le fait qu'on a composé des fonctions

-- >>> myCompo [1,2,3,4,5] qui prend seulement les valeurs impairs
-- 35

orList :: [Bool] -> Bool
orList [] = False
orList (b:bs) = b || orList bs

myAny :: (a -> Bool) -> [a] -> Bool
myAny p = orList . fmap p

-- >>> myAny (\x -> x == 0) [1, 9, 2, 4, 0, 4, 5, 3, 0, 3]
-- True
-- >>> :t (.)
-- (.) :: (b -> c) -> (a -> b) -> a -> c

comp :: (b -> c) -> (a -> b) -> a -> c
comp g f x = g (f x)

myAny2 :: (a -> Bool) -> [a] -> Bool
myAny2 p = orList `comp` fmap p

-- >>> :t take
-- take :: Int -> [a] -> [a]
-- >>> take 10 ones
-- [1,1,1,1,1,1,1,1,1,1]

genNats :: Integer -> [Integer]
genNats n = n : genNats (n + 1)
-- >>> take 10 (genNats 3)
-- [3,4,5,6,7,8,9,10,11,12]

nnats :: [Integer]
nnats = [1..]

myIterate :: (a -> a) -> a -> [a]
myIterate f x = x : myIterate f (f x)

-- >>> take 10 $ myIterate (\x -> x + x) 2
-- [2,4,8,16,32,64,128,256,512,1024]

-- >>> :t filter
-- filter :: (a -> Bool) -> [a] -> [a]
-- >>> take 10 $ filter even nats
-- [2,4,6,8,10,12,14,16,18,20]

myFilter :: (a -> Bool) -> [a] -> [a]
myFilter _ [] = []
myFilter pred (x:xs)
  | pred x = x : myFilter pred xs
  | otherwise = myFilter pred xs

-- >>> take 10 $ myFilter even nats
-- [2,4,6,8,10,12,14,16,18,20]

-- type Num :: * -> Constraint
-- class Num a where
--   (+) :: a -> a -> a
--   (-) :: a -> a -> a
--   (*) :: a -> a -> a
--   negate :: a -> a
--   abs :: a -> a
--   signum :: a -> a
--   fromInteger :: Integer -> a
--   {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
--   	-- Defined in ‘GHC.Num’
-- instance Num Word -- Defined in ‘GHC.Num’
-- instance Num Integer -- Defined in ‘GHC.Num’
-- instance Num Int -- Defined in ‘GHC.Num’
-- instance Num Float -- Defined in ‘GHC.Float’
-- instance Num Double -- Defined in ‘GHC.Float’

-- type Eq :: * -> Constraint
-- class Eq a where
--   (==) :: a -> a -> Bool
--   (/=) :: a -> a -> Bool
--   {-# MINIMAL (==) | (/=) #-}

-- type Ord :: * -> Constraint
-- class Eq a => Ord a where
--   compare :: a -> a -> Ordering
--   (<) :: a -> a -> Bool
--   (<=) :: a -> a -> Bool
--   (>) :: a -> a -> Bool
--   (>=) :: a -> a -> Bool
--   max :: a -> a -> a
--   min :: a -> a -> a
--   {-# MINIMAL compare | (<=) #-}
-- type Ordering :: *
-- data Ordering = LT | EQ | GT

instance Eq CarModel where
  (==) = eqCar

data Pair a b = Pair a b
  deriving (Show, Eq)

-- >>> :t Pair (2 :: Integer) True
-- Pair (2 :: Integer) True :: Pair Integer Bool

infPair :: (Ord a, Ord b) => Pair a b -> Pair a b -> Bool
infPair (Pair x1 y1) (Pair x2 y2) = (x1 < x2) || ((x1 == x2) && (y1 <= y2))

-- Important : il faut que x1 et x2 soient comparables, dont on a la contrainte (Ord a)
--             et pareil pour y1 et y2 donc avec la contrainte (Ord b)
-- >>> infPair (Pair 2 4) (Pair 3 2)
-- True
-- >>> infPair (Pair 4 4) (Pair 3 2)
-- False
-- >>> infPair (Pair 2 3) (Pair 1 5)
-- False

instance (Ord a, Ord b) => Ord (Pair a b) where
  (<=) = infPair

-- >>> (Pair 2 4) <= (Pair 3 2)
-- True
-- >>> (Pair 4 4) <= (Pair 3 2)
-- False
-- >>> (Pair 2 3) <= (Pair 1 5)
-- False
-- >>> (Pair 2 3) > (Pair 1 5)
-- True

data Pair'' a b = Pair'' a b
  deriving (Show, Eq, Ord)

-- >>> (Pair'' 2 4) <= (Pair'' 3 2)
-- True
-- >>> (Pair'' 4 4) <= (Pair'' 3 2)
-- False
-- >>> (Pair'' 2 3) <= (Pair'' 1 5)
-- False

data Tree a = Tip | Node a (Tree a) (Tree a)
  deriving (Show, Eq, Ord, Foldable)

exTree :: Tree Integer
exTree = Node 42 (Node 3 Tip Tip) (Node 5 Tip Tip)

-- >>> F.foldl' (+) 0 exTree
-- 50
-- >>> F.toList exTree
-- [42,3,5]
-- >>> F.all (>0) exTree
-- True

class Printable a where
  toStr :: a -> Text

newtype MyInt = MyInt Integer
  deriving (Show, Eq, Ord)

instance Printable MyInt where
  toStr :: MyInt -> Text
  toStr (MyInt n) = Text.pack $ show n
-- >>> toStr (MyInt 42)
-- "42"

instance Printable Integer where
  toStr :: Integer -> Text
  toStr n = Text.pack $ show n
-- >>> toStr 42
-- "42"

instance Printable Bool where
  toStr :: Bool -> Text
  toStr n = Text.pack $ show n
-- >>> toStr True
-- "True"

instance Printable a => Printable (Maybe a) where
  -- toStr :: Printable a => Maybe a -> Text
  toStr Nothing = "Nothing"
  toStr (Just v) = "Just " <> (toStr v)
-- >>> toStr (Just 42)
-- "Just 42"
-- >>> toStr (Nothing  :: Maybe Integer)
-- "Nothing"

instance Show a => Printable a where
  toStr n = Text.pack $ show n
-- >>> toStr 4.2
-- "4.2"
-- >>> toStr "hello"
-- "\"hello\""

class Readable a where
  fromStr :: Text -> Maybe a
-- un premier cas facile
instance Readable Text where
  fromStr :: Text -> Maybe Text
  fromStr = Just   -- ou  fromStr s = Just s
-- >>> (fromStr "hello") :: Maybe Text
-- Just "hello"

instance Readable Integer where
  fromStr :: Text -> Maybe Integer
  fromStr s = case Read.decimal s  of  -- parsing d'un décimal dans Text.Read
                Left _ -> Nothing
                Right (n :: Integer, _) -> Just n
-- >>> (fromStr "42")  :: Maybe Integer
-- Just 42

-- >>> foldr (\x y -> concat ["(",x,"+",y,")"]) "0" (map show [1..13])
-- "(1+(2+(3+(4+(5+(6+(7+(8+(9+(10+(11+(12+(13+0)))))))))))))"
-- >>> foldl (\x y -> concat ["(",x,"+",y,")"]) "0" (map show [1..13])
-- "(((((((((((((0+1)+2)+3)+4)+5)+6)+7)+8)+9)+10)+11)+12)+13)"
-- >>> foldt (\x y -> concat ["(",x,"+",y,")"]) "0" (map show [1..13])
-- "((((1+2)+(3+4))+((5+6)+(7+8)))+(((9+10)+(11+12))+13))"
-- >>> foldi (\x y -> concat ["(",x,"+",y,")"]) "0" (map show [1..13])
-- "(1+((2+3)+(((4+5)+(6+7))+((((8+9)+(10+11))+(12+13))+0))))"


split :: Char -> String -> [String]
split c s = case break (==c) s 
    of 
  (ls, "") -> [ls]
  (ls, x:rest) -> ls : split c rest   
-- >>> split ';' ";"
-- ["",""]
unsplit :: Char -> [String] -> String
unsplit c s = case s of
  [ls] -> ls
  (ls : rest) -> ls <> [c] <> unsplit c rest
-- >>> unsplit '/' ["aa","bb","ccc","dd d"]
-- "aa/bb/ccc/dd d"

---- Test ----
-- Dans le fichier Spec.hs
import Test.Hspec
import MindEngineSpec as ME

main :: IO ()
main = hspec $ do
  ME.engineSpec

-- Dans le fichier MindEngineSepc.hs
module MindEngineSpec where
import qualified Data.Set as Set 
import qualified Data.Sequence as Seq
import MindEngine -- le code source 
import Test.Hspec

exSecret = mkSecret $ Seq.fromList [Yellow, Yellow, Green, Blue ] -- Definir l'exemple

initFeedbackSpec = do -- nom de test 
  describe "initFeedback" $ do -- nom de method 
    it "returns all secret pegs unmarked" $ do -- la description
      initFeedback exSecret -- le resultat expecte 
        `shouldBe` (Seq.fromList [(Yellow, Unmarked), (Yellow, Unmarked), (Green, Unmarked), (Blue, Unmarked)])

engineSpec = do
  initFeedbackSpec -- le nom de test

-- Pour le quickCheck
splitSpec1 = do
  describe "split" $ do
    it "can be undone with unsplit (v1)" $ property $
      \c xs -> collect (length xs) $ prop_split_unsplit c xs

splitSpec2 = do
  describe "split" $ do
    it "can be undone with unsplit (v2)" $ property $
      \xs -> forAll (elements xs) $ \c -> collect (length xs) $ prop_split_unsplit c xs

splitSpec3 = do
  describe "split" $ do
    it "can be undone with unsplit (v3)" $ property $
      forAll (oneof [return "bla bla bli"
                     , return "toto"
                     , return ""
                     , return "un    deux trois   quatre"]) $
      \xs -> prop_split_unsplit ' ' xs